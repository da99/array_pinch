// Generated by CoffeeScript 1.3.3
(function() {
  var Pinch, _,
    __slice = [].slice;

  _ = require("underscore");

  Pinch = (function() {

    Pinch.compare = function(obj, target, i, count) {
      if (typeof target === "function") {
        return target(obj, i, count);
      } else {
        return obj === target;
      }
    };

    function Pinch(hay) {
      this.hay = hay;
    }

    Pinch.prototype.describe_slice = function(finders, offset) {
      var arr, count, end, end_i, end_limit, final, i, is_end, is_start, next_i, start, start_i;
      start = finders[0];
      end = finders[1];
      if (!start || !end) {
        throw new Error("Both start and end finders needed: " + finders);
      }
      arr = this.hay;
      final = {
        start_index: null,
        end_index: null,
        length: 0
      };
      if (offset == null) {
        offset = 0;
      }
      end_limit = arr.length - 1;
      i = offset - 1;
      while (i < end_limit && (final.length === 0)) {
        i += 1;
        count = 0;
        start_i = i;
        end_i = null;
        is_start = this.constructor.compare(arr[i], start, i, count);
        if (is_start) {
          next_i = i + 1;
          while (next_i < end_limit) {
            count += 1;
            is_end = this.constructor.compare(arr[next_i], end, next_i, count);
            next_i += 1;
            if (is_end) {
              end_i = next_i;
              break;
            }
          }
        }
        if (end_i) {
          final.start_index = start_i;
          final.end_index = end_i;
          final.slice = arr.slice(start_i, end_i);
          final.length = final.slice.length;
          break;
        }
      }
      if (final.length === 0) {
        return null;
      }
      return final;
    };

    Pinch.prototype.alter_all = function() {
      var alter, args, meth, new_arr;
      meth = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      new_arr = this.hay;
      alter = function() {
        var _ref;
        new_arr = (_ref = module.exports(new_arr))[meth].apply(_ref, args);
        return new_arr;
      };
      while (!_.isEqual(new_arr, alter())) {
        new_arr;

      }
      return new_arr;
    };

    Pinch.prototype.remove_all = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.alter_all.apply(this, ["remove"].concat(__slice.call(args)));
    };

    Pinch.prototype.replace_all = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.alter_all.apply(this, ["replace"].concat(__slice.call(args)));
    };

    Pinch.prototype.remove = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.replace.apply(this, args);
    };

    Pinch.prototype.replace = function(finders, replace) {
      var arr, i, l, meta, splice_args;
      if (this.hay.length < finders.length) {
        return this.hay;
      }
      arr = this.hay.slice(0);
      i = -1;
      l = arr.length;
      while (i < l) {
        i += 1;
        meta = module.exports(arr).describe_slice(finders, i);
        if (!meta) {
          break;
        }
        i = meta.end_index - 1;
        splice_args = [meta.start_index, meta.length];
        if (typeof replace === 'function') {
          splice_args.push(replace(meta.slice));
        } else if (typeof replace !== 'undefined') {
          splice_args.push(replace);
        }
        arr.splice.apply(arr, splice_args);
        l = arr.length;
        break;
      }
      return arr;
    };

    return Pinch;

  })();

  module.exports = function(hay) {
    return new Pinch(hay);
  };

}).call(this);
